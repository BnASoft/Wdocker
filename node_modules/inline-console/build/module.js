'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _jsonStringifySafe = require('json-stringify-safe');

var _jsonStringifySafe2 = _interopRequireDefault(_jsonStringifySafe);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

require('imports-loader?jQuery=jquery!./jquery.terminal.js');

require('./jquery.terminal.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TerminalWrapper = function () {
  function TerminalWrapper(target, redirect) {
    (0, _classCallCheck3.default)(this, TerminalWrapper);

    // set instance variables
    this._terminal = null;
    this._origVerbs = null;

    // setup terminal
    var terminal = this._terminal = (0, _jquery2.default)(target).terminal(function (command, terminal) {
      if (command !== '') {
        var result = undefined;
        var succeeded = false;
        try {
          result = window.eval(command);
          succeeded = true;
        } catch (error) {
          terminal.exception(error);
        }
        if (succeeded) {
          terminal.echo((0, _jsonStringifySafe2.default)(result));
        }
      }
    }, {
      greetings: 'Console',
      name: 'inline_console',
      prompt: '> ',
      scrollOnEcho: false
    });

    // redirect native console output
    if (redirect) {
      var origVerbs = this._origVerbs = {};
      ['debug', 'log', 'info', 'warn', 'error'].forEach(function (verb) {
        if (typeof console[verb] != 'undefined') {
          origVerbs[verb] = console[verb];
          console[verb] = function (method, verb) {
            return function () {
              for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              (verb == 'error' ? terminal.error : terminal.echo)(verb + ': ' + args.map(function (i) {
                return (0, _jsonStringifySafe2.default)(i);
              }).join(' '));
              return method.apply(undefined, args);
            };
          }(console[verb].bind(console), verb);
        }
      });
    }
  }

  (0, _createClass3.default)(TerminalWrapper, [{
    key: 'destroy',
    value: function destroy(purge) {
      // unwire console verbse
      if (this._origVerbs) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (0, _getIterator3.default)(_underscore2.default.keys(this._origVerbs)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var verb = _step.value;

            console[verb] = this._origVerbs[verb];
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        this._origVerbs = null;
      }

      // destroy terminal
      if (this._terminal) {
        this._terminal.destroy();
        if (purge) {
          this._terminal.purge();
        }
        this._terminal = null;
      }
    }
  }, {
    key: 'echo',
    value: function echo() {
      if (!this._terminal) {
        throw new Error('inline console not initialized');
      }

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this._terminal.echo(args.map(function (i) {
        return (0, _jsonStringifySafe2.default)(i);
      }).join(' '));
    }
  }, {
    key: 'error',
    value: function error() {
      if (!this._terminal) {
        throw new Error('inline console not initialized');
      }

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this._terminal.error(args.map(function (i) {
        return (0, _jsonStringifySafe2.default)(i);
      }).join(' '));
    }
  }]);
  return TerminalWrapper;
}();

;

var InlineConsole = function (_React$Component) {
  (0, _inherits3.default)(InlineConsole, _React$Component);

  function InlineConsole() {
    (0, _classCallCheck3.default)(this, InlineConsole);
    return (0, _possibleConstructorReturn3.default)(this, (InlineConsole.__proto__ || (0, _getPrototypeOf2.default)(InlineConsole)).apply(this, arguments));
  }

  (0, _createClass3.default)(InlineConsole, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      // create terminal
      this._console = new TerminalWrapper((0, _reactDom.findDOMNode)(this), !!this.props.redirect);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      // re-create terminal
      if (!!this.props.redirect != !!props.redirect) {
        this._console.destroy();
        this._console = new TerminalWrapper((0, _reactDom.findDOMNode)(this), !!props.redirect);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      // destroy terminal
      this._console.destroy();
    }
  }, {
    key: 'render',
    value: function render() {
      // render container element
      return _react2.default.createElement('div', null);
    }
  }]);
  return InlineConsole;
}(_react2.default.Component);

exports.default = InlineConsole;
;
//# sourceMappingURL=module.js.map